{"version":3,"sources":["webpack:///./src/main/js/apps/organizations/components/OrganizationDelete.tsx","webpack:///./src/main/js/components/controls/Modal.tsx","webpack:///./src/main/js/components/controls/SimpleModal.tsx","webpack:///./src/main/js/components/controls/ModalButton.tsx","webpack:///./src/main/js/components/controls/ConfirmModal.tsx","webpack:///./src/main/js/components/controls/ConfirmButton.tsx","webpack:///./src/main/js/apps/organizations/actions.ts"],"names":["OrganizationDelete","_super","_this","apply","this","arguments","mounted","state","fetchOrganizationPlanInfo","Object","_helpers_system__WEBPACK_IMPORTED_MODULE_9__","_api_organizations__WEBPACK_IMPORTED_MODULE_8__","props","organization","key","then","billingInfo","setState","hasPaidPlan","subscription","status","onDelete","deleteOrganization","router","replace","__extends","prototype","componentDidMount","componentWillUnmount","render","title","_helpers_l10n__WEBPACK_IMPORTED_MODULE_5__","react__WEBPACK_IMPORTED_MODULE_0__","react_helmet__WEBPACK_IMPORTED_MODULE_1___default","a","className","_components_common_InstanceMessage__WEBPACK_IMPORTED_MODULE_4__","message","_components_controls_ConfirmButton__WEBPACK_IMPORTED_MODULE_3__","confirmButtonText","isDestructive","modalBody","_components_ui_Alert__WEBPACK_IMPORTED_MODULE_10__","variant","modalHeader","onConfirm","_a","onClick","_components_ui_buttons__WEBPACK_IMPORTED_MODULE_7__","mapDispatchToProps","_actions__WEBPACK_IMPORTED_MODULE_6__","__webpack_exports__","_components_hoc_withRouter__WEBPACK_IMPORTED_MODULE_11__","react_redux__WEBPACK_IMPORTED_MODULE_2__","Modal","react_modal__WEBPACK_IMPORTED_MODULE_1__","__assign","classnames__WEBPACK_IMPORTED_MODULE_2__","modal-medium","medium","modal-large","large","modal-simple","simple","isOpen","overlayClassName","modal-no-backdrop","noBackdrop","SimpleModal","submitting","stopSubmitting","handleCloseClick","event","preventDefault","currentTarget","blur","onClose","handleFormSubmit","submit","handleSubmitClick","result","onSubmit","_Modal__WEBPACK_IMPORTED_MODULE_1__","contentLabel","header","onRequestClose","children","onCloseClick","onFormSubmit","onSubmitClick","ModalButton","modal","handleButtonClick","handleCloseModal","ConfirmModal","handleSubmit","confirmData","renderModalContent","_b","confirmDisable","_c","cancelButtonText","_helpers_l10n__WEBPACK_IMPORTED_MODULE_3__","_common_DeferredSpinner__WEBPACK_IMPORTED_MODULE_2__","loading","_ui_buttons__WEBPACK_IMPORTED_MODULE_4__","autoFocus","undefined","disabled","_SimpleModal__WEBPACK_IMPORTED_MODULE_1__","ConfirmButton","renderConfirmModal","_ConfirmModal__WEBPACK_IMPORTED_MODULE_2__","_ModalButton__WEBPACK_IMPORTED_MODULE_1__","fetchOrganization","dispatch","Promise","all","_api_organizations__WEBPACK_IMPORTED_MODULE_0__","navigation","organizationWithPermissions","_store_organizations__WEBPACK_IMPORTED_MODULE_1__","updateOrganization","changes","_store_globalMessages__WEBPACK_IMPORTED_MODULE_2__"],"mappings":"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","file":"js/331.9304c3b8.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { connect } from 'react-redux';\nimport ConfirmButton from '../../../components/controls/ConfirmButton';\nimport InstanceMessage from '../../../components/common/InstanceMessage';\nimport { translate } from '../../../helpers/l10n';\nimport { deleteOrganization } from '../actions';\nimport { Button } from '../../../components/ui/buttons';\nimport { getOrganizationBilling } from '../../../api/organizations';\nimport { isSonarCloud } from '../../../helpers/system';\nimport { Alert } from '../../../components/ui/Alert';\nimport { withRouter, Router } from '../../../components/hoc/withRouter';\n\ninterface DispatchToProps {\n  deleteOrganization: (key: string) => Promise<void>;\n}\n\ninterface OwnProps {\n  organization: Pick<T.Organization, 'key' | 'name'>;\n  router: Pick<Router, 'replace'>;\n}\n\ntype Props = OwnProps & DispatchToProps;\n\ninterface State {\n  hasPaidPlan?: boolean;\n}\n\nexport class OrganizationDelete extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = {};\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchOrganizationPlanInfo();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchOrganizationPlanInfo = () => {\n    if (isSonarCloud()) {\n      getOrganizationBilling(this.props.organization.key).then(\n        billingInfo => {\n          if (this.mounted) {\n            this.setState({\n              hasPaidPlan: billingInfo.subscription.status !== 'inactive'\n            });\n          }\n        },\n        () => {\n          if (this.mounted) {\n            this.setState({ hasPaidPlan: false });\n          }\n        }\n      );\n    }\n  };\n\n  onDelete = () => {\n    return this.props.deleteOrganization(this.props.organization.key).then(() => {\n      this.props.router.replace('/');\n    });\n  };\n\n  render() {\n    const { hasPaidPlan } = this.state;\n    const title = translate('organization.delete');\n    return (\n      <>\n        <Helmet title={title} />\n        <div className=\"page page-limited\">\n          <header className=\"page-header\">\n            <h1 className=\"page-title\">{title}</h1>\n            <div className=\"page-description\">\n              <InstanceMessage message={translate('organization.delete.description')} />\n            </div>\n          </header>\n          <ConfirmButton\n            confirmButtonText={translate('delete')}\n            isDestructive={true}\n            modalBody={\n              <div>\n                {hasPaidPlan && (\n                  <Alert variant=\"warning\">\n                    {translate('organization.delete.sonarcloud.paid_plan_info')}\n                  </Alert>\n                )}\n                <p>{translate('organization.delete.question')}</p>\n              </div>\n            }\n            modalHeader={translate('organization.delete')}\n            onConfirm={this.onDelete}>\n            {({ onClick }) => (\n              <Button className=\"js-custom-measure-delete button-red\" onClick={onClick}>\n                {translate('delete')}\n              </Button>\n            )}\n          </ConfirmButton>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps: DispatchToProps = { deleteOrganization: deleteOrganization as any };\n\nexport default withRouter(\n  connect(\n    null,\n    mapDispatchToProps\n  )(OrganizationDelete)\n);\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport * as ReactModal from 'react-modal';\nimport * as classNames from 'classnames';\n\nReactModal.setAppElement('#content');\n\ninterface OwnProps {\n  medium?: boolean;\n  noBackdrop?: boolean;\n  large?: boolean;\n  simple?: true;\n}\n\ntype MandatoryProps = Pick<ReactModal.Props, 'contentLabel'>;\n\ntype Props = Partial<ReactModal.Props> & MandatoryProps & OwnProps;\n\nexport default function Modal(props: Props) {\n  return (\n    <ReactModal\n      className={classNames('modal', {\n        'modal-medium': props.medium,\n        'modal-large': props.large,\n        'modal-simple': props.simple\n      })}\n      isOpen={true}\n      overlayClassName={classNames('modal-overlay', { 'modal-no-backdrop': props.noBackdrop })}\n      {...props}\n    />\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport Modal from './Modal';\n\nexport interface ChildrenProps {\n  onCloseClick: (event?: React.SyntheticEvent<HTMLElement>) => void;\n  onFormSubmit: (event: React.SyntheticEvent<HTMLFormElement>) => void;\n  onSubmitClick: (event?: React.SyntheticEvent<HTMLElement>) => void;\n  submitting: boolean;\n}\n\ninterface Props {\n  children: (props: ChildrenProps) => React.ReactNode;\n  header: string;\n  onClose: () => void;\n  onSubmit: () => void | Promise<void>;\n}\n\ninterface State {\n  submitting: boolean;\n}\n\nexport default class SimpleModal extends React.Component<Props, State> {\n  mounted = false;\n  state: State = { submitting: false };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  stopSubmitting = () => {\n    if (this.mounted) {\n      this.setState({ submitting: false });\n    }\n  };\n\n  handleCloseClick = (event?: React.SyntheticEvent<HTMLElement>) => {\n    if (event) {\n      event.preventDefault();\n      event.currentTarget.blur();\n    }\n    this.props.onClose();\n  };\n\n  handleFormSubmit = (event: React.SyntheticEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    this.submit();\n  };\n\n  handleSubmitClick = (event?: React.SyntheticEvent<HTMLElement>) => {\n    if (event) {\n      event.preventDefault();\n      event.currentTarget.blur();\n    }\n    this.submit();\n  };\n\n  submit = () => {\n    const result = this.props.onSubmit();\n    if (result) {\n      this.setState({ submitting: true });\n      result.then(this.stopSubmitting, this.stopSubmitting);\n    }\n  };\n\n  render() {\n    return (\n      <Modal contentLabel={this.props.header} onRequestClose={this.props.onClose}>\n        {this.props.children({\n          onCloseClick: this.handleCloseClick,\n          onFormSubmit: this.handleFormSubmit,\n          onSubmitClick: this.handleSubmitClick,\n          submitting: this.state.submitting\n        })}\n      </Modal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\n\nexport interface ChildrenProps {\n  onClick: () => void;\n  onFormSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n}\n\nexport interface ModalProps {\n  onClose: () => void;\n}\n\nexport interface Props {\n  children: (props: ChildrenProps) => React.ReactNode;\n  modal: (props: ModalProps) => React.ReactNode;\n}\n\ninterface State {\n  modal: boolean;\n}\n\nexport default class ModalButton extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { modal: false };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleButtonClick = () => {\n    this.setState({ modal: true });\n  };\n\n  handleFormSubmit = (event?: React.FormEvent<HTMLFormElement>) => {\n    if (event) {\n      event.preventDefault();\n    }\n    this.setState({ modal: true });\n  };\n\n  handleCloseModal = () => {\n    if (this.mounted) {\n      this.setState({ modal: false });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        {this.props.children({\n          onClick: this.handleButtonClick,\n          onFormSubmit: this.handleFormSubmit\n        })}\n        {this.state.modal && this.props.modal({ onClose: this.handleCloseModal })}\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport SimpleModal, { ChildrenProps } from './SimpleModal';\nimport DeferredSpinner from '../common/DeferredSpinner';\nimport { translate } from '../../helpers/l10n';\nimport { SubmitButton, ResetButtonLink } from '../ui/buttons';\n\ninterface Props<T> {\n  children: React.ReactNode;\n  cancelButtonText?: string;\n  confirmButtonText: string;\n  confirmData?: T;\n  confirmDisable?: boolean;\n  header: string;\n  isDestructive?: boolean;\n  onClose: () => void;\n  onConfirm: (data?: T) => void | Promise<void>;\n}\n\nexport default class ConfirmModal<T = string> extends React.PureComponent<Props<T>> {\n  mounted = false;\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleSubmit = () => {\n    const result = this.props.onConfirm(this.props.confirmData);\n    if (result) {\n      return result.then(this.props.onClose, () => {});\n    } else {\n      this.props.onClose();\n      return undefined;\n    }\n  };\n\n  renderModalContent = ({ onCloseClick, onFormSubmit, submitting }: ChildrenProps) => {\n    const { children, confirmButtonText, confirmDisable, header, isDestructive } = this.props;\n    const { cancelButtonText = translate('cancel') } = this.props;\n    return (\n      <form onSubmit={onFormSubmit}>\n        <header className=\"modal-head\">\n          <h2>{header}</h2>\n        </header>\n        <div className=\"modal-body\">{children}</div>\n        <footer className=\"modal-foot\">\n          <DeferredSpinner className=\"spacer-right\" loading={submitting} />\n          <SubmitButton\n            autoFocus={true}\n            className={isDestructive ? 'button-red' : undefined}\n            disabled={submitting || confirmDisable}>\n            {confirmButtonText}\n          </SubmitButton>\n          <ResetButtonLink disabled={submitting} onClick={onCloseClick}>\n            {cancelButtonText}\n          </ResetButtonLink>\n        </footer>\n      </form>\n    );\n  };\n\n  render() {\n    const { header } = this.props;\n    return (\n      <SimpleModal header={header} onClose={this.props.onClose} onSubmit={this.handleSubmit}>\n        {this.renderModalContent}\n      </SimpleModal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ModalButton, { ChildrenProps, ModalProps } from './ModalButton';\nimport ConfirmModal from './ConfirmModal';\n\nexport { ChildrenProps } from './ModalButton';\n\ninterface Props {\n  children: (props: ChildrenProps) => React.ReactNode;\n  cancelButtonText?: string;\n  confirmButtonText: string;\n  confirmData?: string;\n  confirmDisable?: boolean;\n  isDestructive?: boolean;\n  modalBody: React.ReactNode;\n  modalHeader: string;\n  onConfirm: (data?: string) => void | Promise<void>;\n}\n\ninterface State {\n  modal: boolean;\n}\n\nexport default class ConfirmButton extends React.PureComponent<Props, State> {\n  renderConfirmModal = ({ onClose }: ModalProps) => {\n    return (\n      <ConfirmModal\n        cancelButtonText={this.props.cancelButtonText}\n        confirmButtonText={this.props.confirmButtonText}\n        confirmData={this.props.confirmData}\n        confirmDisable={this.props.confirmDisable}\n        header={this.props.modalHeader}\n        isDestructive={this.props.isDestructive}\n        onClose={onClose}\n        onConfirm={this.props.onConfirm}>\n        {this.props.modalBody}\n      </ConfirmModal>\n    );\n  };\n\n  render() {\n    return <ModalButton modal={this.renderConfirmModal}>{this.props.children}</ModalButton>;\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { Dispatch } from 'redux';\nimport * as api from '../../api/organizations';\nimport * as actions from '../../store/organizations';\nimport { addGlobalSuccessMessage } from '../../store/globalMessages';\nimport { translate, translateWithParameters } from '../../helpers/l10n';\n\nexport const fetchOrganization = (key: string) => (dispatch: Dispatch) => {\n  return Promise.all([api.getOrganization(key), api.getOrganizationNavigation(key)]).then(\n    ([organization, navigation]) => {\n      if (organization) {\n        const organizationWithPermissions = { ...organization, ...navigation };\n        dispatch(actions.receiveOrganizations([organizationWithPermissions]));\n      }\n    }\n  );\n};\n\nexport const createOrganization = (organization: T.OrganizationBase) => (\n  dispatch: Dispatch<any>\n) => {\n  return api.createOrganization(organization).then((organization: T.Organization) => {\n    dispatch(actions.createOrganization(organization));\n    dispatch(\n      addGlobalSuccessMessage(translateWithParameters('organization.created', organization.name))\n    );\n    return organization;\n  });\n};\n\nexport const updateOrganization = (key: string, changes: T.OrganizationBase) => (\n  dispatch: Dispatch<any>\n) => {\n  return api.updateOrganization(key, changes).then(() => {\n    dispatch(actions.updateOrganization(key, changes));\n    dispatch(addGlobalSuccessMessage(translate('organization.updated')));\n  });\n};\n\nexport const deleteOrganization = (key: string) => (dispatch: Dispatch<any>) => {\n  return api.deleteOrganization(key).then(() => {\n    dispatch(actions.deleteOrganization(key));\n    dispatch(addGlobalSuccessMessage(translate('organization.deleted')));\n  });\n};\n"],"sourceRoot":""}